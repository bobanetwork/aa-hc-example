name: Smart Contract Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Forge and Hardhat Tests
    runs-on: ubuntu-latest
    environment: tests
    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Rust and Cargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Make
        run: sudo apt-get install -y make

      - name: Install dependencies (root)
        run: pnpm install

      - name: Install dependencies (contracts)
        run: pnpm install
        working-directory: ./contracts

      - name: Run Forge tests
        run: forge test -vvv
        working-directory: ./contracts

      - name: Start local environment
        run: |
          pnpm start:local > local_env.log 2>&1 &
          PID=$!
          echo $PID > .pidfile
          
          # Wait for up to 2 minutes
          TIMEOUT=120
          while [ $TIMEOUT -gt 0 ]; do
            if grep -q "Local environment is ready" local_env.log; then
              echo "Local environment is ready"
              exit 0
            fi
            sleep 5
            TIMEOUT=$((TIMEOUT - 5))
          done
          
          echo "Timed out waiting for local environment to start"
          cat local_env.log
          exit 1

      - name: Run Hardhat tests
        run: npx hardhat test
        working-directory: ./contracts
        env:
          TOKEN_PRICE_CONTRACT: ${{ vars.TOKEN_PRICE_CONTRACT }}
          RPC_URL: ${{ vars.RPC_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

      - name: Stop local environment
        if: always()
        run: |
          if [ -f .pidfile ]; then
            kill $(cat .pidfile) || true
          fi